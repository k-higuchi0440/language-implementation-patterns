package pattern.interpreter

/**
  * パターン25: 木方式インタプリタ
  *
  * "本パターンは、ソースコードから抽象構文木を構築して走査することでプログラムを実行します"
  *
  * "木方式インタプリタとは、コンパイラのフロントエンドをコード生成器ではなく解釈実行器と接ぎ足したようなものです"
  *
  * "パイプラインの構造を変更したことで、構文主導インタプリタよりも有利になっている点がいくつかあります"
  *
  * ・ 構文解析と実行の間の作業を区切ることで、記号定義を記号解決から分離できます（前方参照が可能になる）
  * ・ 抽象構文木を構築するときに必要に応じて置換ができるため、木方式インタプリタの方が柔軟です（略）
  *    最適化などの処理を実行するために、命令実行よりも前の段階の独立したパスの中で抽象構文木を置き換えることもできます
  *
  * 高級インタプリタが最も動作するのは、動的型付け言語とDSL
  *
  * "PrologやLISPのような言語を処理するインタプリタを構築するのは、
  *  PythonやJavaを処理するインタプリタを構築するのと大きくことなります"
  *
  * "本パターンの高級インタプリタが最もうまく動作するのは動的型付け言語とDSLの場合なので、
  *  Python風の動的型付け言語を作り出して、Pieという名前で呼ぶことにします"
  *
  */
package object pattern25_treebased