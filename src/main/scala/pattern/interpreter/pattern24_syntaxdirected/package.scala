package pattern.interpreter

/**
  * パターン24: 構文主導インタプリタ
  *
  * "本パターンは、中間表現を構築せず、別の言語に変換することもしないでソースコードを直接実行します。
  *  本パターンのサンプル実装は、簡易SQLを処理する構文主導インタプリタの構築に焦点を当てて説明します"
  *
  * "構文主導インタプリタの良いところは、「可動部分」が非常に少ないことです。
  *  実際に必要なコンポーネントは2つしかありません"
  *
  * ソースコード構文解析器
  * "構文解析器は入力構成体を認識したらすぐにアクションを発動します。
  *  本パターンのサンプル実装の場合なら、select()やcreateTable()などのメソッドを発動することを意味します"
  *
  * 解釈実行器
  * "解釈実行器（interpreter）は、状態を管理し、命令実装メソッドを収納します。
  *  言語によっては、解釈実行器がコードメモリ（入力列）と
  *  （変数の名前と値との組を記録するための）大域メモリ空間を用意することになります"
  *
  * "構文主導インタプリタの悪いところは、ごく狭い範囲の言語にしか適さないことです。
  *  小さなDSLに対してはとてもうまく動作しますが、汎用プログラミング言語ではそうはいきません（略）
  *  例えば、インタプリタが関数定義を見つけたときは、関数本体の中にある文を実行してはいけません。
  *  関数本体を実行するのは、同じプログラムの他の箇所から呼び出されたときだけにしないといけません"
  *
  * "入力言語が命令や単純な宣言文の羅列であるような場合に、本パターンを使ってください。
  *  例えば、描画言語やネットワークプロトコル、テキスト処理言語、ジョブ制御言語、
  *  そして簡単なシェルスクリプト言語などがそうです"
  *
  */
package object pattern24_syntaxdirected
