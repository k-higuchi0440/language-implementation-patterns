package pattern.typing

/**
  * パターン 22: 型安全性を守らせる
  *
  * "本パターンは、式と文の中で互換性のない型を静的に検出します"
  *
  * "Cのように明示的な宣言をする任意の静的型付け言語に対して型安全性検査器を構築する場合は、
  *  本パターンの延長線上に必要なもののすべてを作ることができます。
  *  コンパイラなどの静的型付け言語を変換もしくは解析するツールには、本パターンが必要です"
  *
  * Cymbolで守らないといけない型互換性規則
  *
  * 1. if条件部を評価したら、必ず真偽値になります
  * 2. 配列参照添え字は整数でないといけません
  * 3. 代入の左辺と右辺は、互換性のある型でないといけません
  * 4. 関数呼出しの引数と関数宣言の仮引数の型には互換性がないといけません
  * 5. returnの式と関数の戻り値の型には互換性がないといけません
  * 6. 二項算術演算子の2つの被演算数の型には互換性がないといけません
  * 7. 単項演算子の被演算数は適切な型でないといけません
  *
  * 型互換性
  *
  * "型互換性とは2つのことを意味します"
  *
  * ・ 演算が適用される被演算数に対して、その被演算数を使った演算が定義されていないといけません
  * ・ 型tの値を探しているなら、その値の型は、tであるかまたはtへと昇格することのできる型でないといけません
  *
  * "これと同時に、次のような記号分類ごとの規則にも従わせた方がいいでしょう"
  *
  * ・ x.yの場合、xは構造体でないといけません
  * ・ f()の場合、fは関数記号でないといけません
  * ・ a[...]の場合、aは配列記号でないといけません
  *
  */
package object pattern22_typesafe